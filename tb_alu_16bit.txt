// Code your testbench here
// or browse Examples
// Code your design here
// Code your testbench here
// or browse Examples
`timescale 1ns/1ps

module tb_alu();

    // Khai bao cac tin hieu
  reg [15:0] a, b;                  // toan hang dau vao
  reg [2:0] opcode;                // ma lenh
  wire [15:0] result;              // ket qua dau ra
    wire carry_out, zero, negative, overflow; // Cac co trang thai

    // Bien de tinh ket qua mong doi
    reg [15:0] expected_result;
    reg expected_carry_out, expected_zero, expected_negative, expected_overflow;

    // Bien thong ke ket qua
    integer total_tests = 0;
    integer pass_count = 0;
    integer fail_count = 0;

    // ƒêinh nghia opcode
    localparam ADD = 3'b000;
    localparam SUB = 3'b001;
    localparam AND = 3'b010;
    localparam OR  = 3'b011;
    localparam XOR = 3'b100;
    localparam NOT = 3'b101;
    localparam SLL = 3'b110;
    localparam SRL = 3'b111;

  // Ket noi ALU (module can kiem tra)
    alu_16bit uut (
        .a(a),
        .b(b),
        .opcode(opcode),
        .result(result),
        .carry_out(carry_out),
        .zero(zero),
        .negative(negative),
        .overflow(overflow)
    );

    initial begin
        // Hien thi tieu de bang
        $display("Time      | A                | B                | Opcode | Result           | Carry Out | Zero | Negative | Overflow | Pass/Fail");
		$display("---------------------------------------------------------------------------------------------");


        // ADD Test Case
      $display("\nTest Case 1: ADD");
      for (int i = 0; i < 500; i++) begin
            opcode = ADD;
        a = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
    		b = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
            {expected_carry_out, expected_result} = a + b;
            expected_overflow = (a[15] == b[15]) && (expected_result[15] != a[15]);
            run_test();
        end

        // SUB Test Case
      $display("\nTest Case 2: SUB");
      for (int i = 0; i < 500; i++) begin
            opcode = SUB;
            a = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
    		b = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
            {expected_carry_out, expected_result} = a - b;
            expected_overflow = (a[15] != b[15]) && (expected_result[15] != a[15]);
            run_test();
        end

        // AND Test Case
      $display("\nTest Case 3: AND");
      for (int i = 0; i < 500; i++) begin
            opcode = AND;
            a = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
    		b = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
            expected_result = a & b;
            expected_overflow = 0;
            expected_carry_out = 0;
            run_test();
        end

        // OR Test Case
      $display("\nTest Case 4: OR");
      for (int i = 0; i < 500; i++) begin
            opcode = OR;
            a = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
    		b = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
            expected_result = a | b;
            expected_overflow = 0;
            expected_carry_out = 0;
            run_test();
        end

        // XOR Test Case
      $display("\nTest Case 5: XOR");
      for (int i = 0; i < 500; i++) begin
            opcode = XOR;
            a = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
    		b = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
            expected_result = a ^ b;
            expected_overflow = 0;
            expected_carry_out = 0;
            run_test();
        end

        // NOT Test Case
      $display("\nTest Case 6: NOT");
      for (int i = 0; i < 500; i++) begin
            opcode = NOT;
            a = $random;
            expected_result = ~a;
            expected_overflow = 0;
            expected_carry_out = 0;
            run_test();
        end

        // SLL Test Case
      $display("\nTest Case 7: SLL");
      for (int i = 0; i < 500; i++) begin
            opcode = SLL;
            a = $urandom_range(0, 16'hFFFF); //So ngau nhien 16bit
            expected_result = a << 1;
            expected_overflow = 0;
            expected_carry_out = 0;
            run_test();
        end

        // SRL Test Case
      $display("\nTest Case 8: SRL");
      for (int i = 0; i < 500; i++) begin
            opcode = SRL;
            a = $urandom_range(0, 16'hFFFF); // So ngau nhien 16bit
            expected_result = a >> 1;
            expected_overflow = 0;
            expected_carry_out = 0;
            run_test();
        end

        // In tong ket qua
        $display("\nTest Summary:");
        $display("Total Tests:\t%0d", total_tests);
        $display("Passed:\t\t%0d", pass_count);
        $display("Failed:\t\t%0d", fail_count);
        $finish;
    end

    task run_test();
        begin
            // Kiem tra Zero flag
            expected_zero = (expected_result == 16'b0) ? 1 : 0;

            // Kiem tra Negative flag
            expected_negative = (expected_result[15] == 1) ? 1 : 0;

            // Cho mot chu ky
            #10;

            // Kiem tra ket qua
            total_tests++;
            if (result == expected_result && carry_out == expected_carry_out && 
    zero == expected_zero && negative == expected_negative && overflow == expected_overflow) begin
    pass_count++;
    $display("%-10t | %-16h | %-16h | %-6h | %-16h | %-9h | %-4h | %-8h | %-8h | PASS", 
             $time, a, b, opcode, result, carry_out, zero, negative, overflow);
end else begin
    fail_count++;
    $display("%-10t | %-16h | %-16h | %-6h | %-16h | %-9h | %-4h | %-8h | %-8h | FAIL", 
             $time, a, b, opcode, result, carry_out, zero, negative, overflow);
end
        end
    endtask
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0,tb_alu);
  end

endmodule
